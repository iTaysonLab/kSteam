option java_package = "steam.webui.partnermeetsteam";

message CParterMeetSteam_TestFireEmails_Request {
	optional fixed64 clan_event_gid = 1;
	optional fixed64 steamid = 2;
}

message CParterMeetSteam_TestFireEmails_Response {
	repeated uint32 sessionids = 1;
}

message CPartnerEmailAndName {
	optional uint32 accountid = 1;
	optional uint32 partnerid = 2;
	optional string realname = 3;
	optional string email = 4;
}

message CPartnerMeetSteam_EmailInvitees_Request {
	optional fixed64 clan_event_gid = 1;
	optional fixed64 steamid = 2;
}

message CPartnerMeetSteam_EmailInvitees_Response {
	optional uint32 num_emailed = 1;
	optional uint32 num_skipped = 2;
}

message CPartnerMeetSteam_GetAvailability_Request {
	optional fixed64 clan_event_gid = 1;
}

message CPartnerMeetSteam_GetAvailability_Response {
	repeated .CPartnerMeetSteam_GetAvailability_Response_Session availability = 1;
}

message CPartnerMeetSteam_GetAvailability_Response_Session {
	optional uint32 group_id = 1;
	optional uint32 session_id = 2;
	optional uint32 guest_count = 3;
}

message CPartnerMeetSteam_GetBatchPartnerEmailAndName_Request {
	repeated uint32 accountids = 1;
	repeated uint32 partnerids = 2;
}

message CPartnerMeetSteam_GetBatchPartnerEmailAndName_Response {
	repeated .CPartnerEmailAndName info = 1;
}

message CPartnerMeetSteam_GetRegistrations_Request {
	optional fixed64 clan_event_gid = 1;
	optional fixed64 steamid = 2;
}

message CPartnerMeetSteam_GetRegistrations_Response {
	repeated .CPartnerMeetSteam_GetRegistrations_Response_Registration registrations = 1;
}

message CPartnerMeetSteam_GetRegistrations_Response_Registration {
	optional uint32 group_id = 1;
	optional uint32 session_id = 2;
	optional fixed64 steamid = 3;
	optional uint32 guests_registered = 4;
	optional string jsondata = 5;
	optional uint32 rt_attendance_marked = 6;
	optional uint32 attendance_count = 7;
	optional string guests_attendance = 8;
}

message CPartnerMeetSteam_GetSaleEventOrganizers_Request {
	optional uint32 rt_oldest_date = 1;
}

message CPartnerMeetSteam_GetSaleEventOrganizers_Response {
	repeated .CSaleEventOrganizerInfo info = 1;
}

message CPartnerMeetSteam_UpdateRegistration_Request {
	optional fixed64 clan_event_gid = 1;
	optional fixed64 steamid = 2;
	optional uint32 registration_group_id = 3;
	optional uint32 registration_session_id = 4;
	optional uint32 guest_count = 5;
	optional string jsondata = 7;
	optional bool skip_email = 8;
}

message CPartnerMeetSteam_UpdateRegistration_Response {
}

message CSaleEventOrganizerInfo {
	optional uint32 accountid = 1;
	repeated fixed64 clan_event_gids = 2;
}

service PartnerMeetSteam {
	// ePrivilege=4
	rpc EmailInvitees (.CPartnerMeetSteam_EmailInvitees_Request) returns (.CPartnerMeetSteam_EmailInvitees_Response);
	// bConstMethod=true, ePrivilege=0, eWebAPIKeyRequirement=1
	rpc GetAvailability (.CPartnerMeetSteam_GetAvailability_Request) returns (.CPartnerMeetSteam_GetAvailability_Response);
	// bConstMethod=true, ePrivilege=1
	rpc GetBatchPartnerEmailAndName (.CPartnerMeetSteam_GetBatchPartnerEmailAndName_Request) returns (.CPartnerMeetSteam_GetBatchPartnerEmailAndName_Response);
	// bConstMethod=true, ePrivilege=1
	rpc GetRegistrations (.CPartnerMeetSteam_GetRegistrations_Request) returns (.CPartnerMeetSteam_GetRegistrations_Response);
	// bConstMethod=true, ePrivilege=4
	rpc GetSaleEventOrganizers (.CPartnerMeetSteam_GetSaleEventOrganizers_Request) returns (.CPartnerMeetSteam_GetSaleEventOrganizers_Response);
	// ePrivilege=4
	rpc TestFireEmails (.CParterMeetSteam_TestFireEmails_Request) returns (.CParterMeetSteam_TestFireEmails_Response);
	// bConstMethod=true, ePrivilege=1
	rpc UpdateRegistration (.CPartnerMeetSteam_UpdateRegistration_Request) returns (.CPartnerMeetSteam_UpdateRegistration_Response);
}

